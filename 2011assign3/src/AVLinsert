AVL Insertion Algorithm:
=======================

Given an AVL tree and a new key value to be inserted.
Here balance of a node is defined to be
the height of its left subtree minus the height of its right subtree.

1. Perform an insertion of the item into the AVL-tree as a BST insertion.
   The new node, say w, will have balance factor 0 (and height value 1).

2. Retrace the path up the tree from w to the root
   (use the parent information if it is stored;
    otherwise a stack can be used to keep track of the nodes
    visited down the tree during the insertion step)
       let z be the current node on the path
       recompute the balance factor (and the height if necessary) of node z
   until either
            the new balance factor of z is -2 or +2
         or the new balance factor of z is 0
         or z is the root (with balance factor -1, 0 or +1)

3. Exit if the new balance factor of z is 0 or z is the root (with
   balance factor -1, 0 or +1).
   Note: if the new balance factor of z is 0, the balance factor of the
   remaining nodes on the path will not be changed by the insertion of w.

4. If the new balance factor of z is -2 or +2, rebalance by
   single/double rotation is necessary. (Note z can be the root)

   Let y be the child of z along the path from w to z.

   Case 1: balance(z) = +2, balance(y) = +1: apply single right rotation at z

   Case 2: balance(z) = -2, balance(y) = -1: apply single left rotation at z

   Case 3: balance(z) = +2, balance(y) = -1: apply double rotation
           left rotation at y followed by right rotation at z

   Case 4: balance(z) = -2, balance(y) = +1: apply double rotation
           right rotation at y followed by left rotation at z


       Case 1            Case 2              Case 3            Case 4

            z              z                      z              z
          /   \          /   \                  /   \          /   \
        y      o        o      y              y      o        o      y
      /   \   ooo      ooo   /   \          /   \   ooo      ooo   /   \
     x     o ooooo    ooooo o     x        o     x ooooo    ooooo x     o
    ooo   ooo              ooo   ooo      ooo   ooo              ooo   ooo
   ooooo ooooo            ooooo ooooo    ooooo ooooo            ooooo ooooo
     w                            w              w                w
